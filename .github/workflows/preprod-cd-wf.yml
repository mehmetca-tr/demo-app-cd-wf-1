name: "Preprod-CD-Workflow"

on:
  workflow_dispatch:  

env:
  ENV_FILE: env-config-var.txt

jobs:
  # BASIC CI Workflow
  build:
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout repository"
      uses: actions/checkout@master

    - name: Import environment configuration variables maps file
      id: import-env
      shell: bash
      run: |
        while read line; do
          echo "$line" >> $GITHUB_ENV
        done < ${{ env.ENV_FILE }}
    
    - uses: Azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_URL }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
    
    - name: "Build and push to container registry"
      run: |
        docker build . -t ${{ secrets.ACR_URL }}/${{env.IMAGE_NAME}}:${{ github.sha }}
        docker push ${{ secrets.ACR_URL }}/${{env.IMAGE_NAME}}:${{ github.sha }}

  # CD Workflow
  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout service repository"
      uses: actions/checkout@v3
      with:
        path: main

    - name: "Checkout services-helm-charts repository"
      uses: actions/checkout@v3
      with:
        repository: mehmetca-tr/services-helm-charts
        path: services-helm-charts

    - name: Import environment configuration variables maps file
      id: import-env
      shell: bash
      run: |
        while read line; do
          echo "$line" >> $GITHUB_ENV
        done < main/${{ env.ENV_FILE }}

    - name: "Set the target AKS cluster"
      uses: Azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.RESOURCE_GROUP }}

    ### HELM COMMANDS

    - name: Install Helm
      uses: Azure/setup-helm@v1
      with:
        version: v3.8.0

    - name: Helm Dry Run
      run: |
        helm upgrade \
            --dry-run \
            --install \
            --create-namespace \
            --namespace ${{ env.NAMESPACE }} \
            --atomic \
            --wait \
            ${{ env.HELM_RELEASE_NAME }} \
            ${{ env.HELM_CHART_PATH }} \
            --set namespace=${{ env.NAMESPACE }} \
            --set image.repository=${{ secrets.ACR_URL }} \
            --set image.name=${{ env.IMAGE_NAME }} \
            --set image.tag=${{ github.sha }} 

    - name: Helm Package
      run: |
        helm package \
            --dependency-update \
            --app-version ${{ env.APP_VERSION }}-${{ github.sha }} \
            --version ${{ env.HELM_CHART_VERSION }}-${{ github.sha }} \
            ${{ env.HELM_CHART_PATH }}

    - name: Authenticate with the registry
      run: |
        helm registry login \
            ${{ secrets.ACR_URL }} \
            --username ${{ secrets.ACR_USERNAME }} \
            --password ${{ secrets.ACR_PASSWORD }}

    - name: Push chart to registry as OCI artifact
      run: |
        helm push \
        ${{ env.HELM_RELEASE_NAME }}-${{ env.HELM_CHART_VERSION }}-${{ github.sha }}.tgz \
        oci://${{ secrets.ACR_URL }}/helm

    - name: Install / Upgrade helm chart
      run: |
        helm upgrade \
            --install \
            --create-namespace \
            --namespace ${{ env.NAMESPACE }} \
            --atomic \
            --wait \
            ${{ env.HELM_RELEASE_NAME }} \
            oci://${{ secrets.ACR_URL }}/helm/${{ env.HELM_RELEASE_NAME }} --version ${{ env.HELM_CHART_VERSION }}-${{ github.sha }} \
            --set namespace=${{ env.NAMESPACE }} \
            --set image.repository=${{ secrets.ACR_URL }} \
            --set image.name=${{ env.IMAGE_NAME }} \
            --set image.tag=${{ github.sha }} 

    # --- PreProd Tests ---

    - name: "PreProd Test Steps"
      run: echo "---- PreProd Tests ----"

    # --- Validation&Approvement ---

    - name: "PreProd Approvement Step"
      run: echo "---- PreProd Approvement ----"

    # --- Image Promotion ---

    - name: "PreProd Image Promotion Step"
      run: echo "---- PreProd Image Promotion ----"



